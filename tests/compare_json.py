#!/usr/bin/env python3
"""
Compare two JSON representations of tar file contents.
This script compares JSON files generated by tar_to_json.py and reports
differences in a structured way, ignoring order and format differences.
"""

import json
import sys
import argparse
import re
from pathlib import Path
from typing import Dict, Any, List, Set


def load_json_file(json_path: str) -> Dict[str, Any]:
    """Load and parse a JSON file."""
    try:
        with open(json_path, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error reading JSON file {json_path}: {e}", file=sys.stderr)
        return {}


def compare_file_info(path: str, info1: Dict, info2: Dict) -> List[str]:
    """Compare file information and return list of differences."""
    differences = []

    # Compare file type
    type1 = info1.get('type', 'unknown')
    type2 = info2.get('type', 'unknown')
    if type1 != type2:
        differences.append(f"Type: {type1} vs {type2}")

    # Compare size (only for files)
    if type1 == 'file' and type2 == 'file':
        size1 = info1.get('size', 0)
        size2 = info2.get('size', 0)
        if size1 != size2:
            differences.append(f"Size: {size1} vs {size2}")

    # Compare permissions
    mode1 = info1.get('mode', '0o0')
    mode2 = info2.get('mode', '0o0')
    if mode1 != mode2:
        differences.append(f"Mode: {mode1} vs {mode2}")

    # Compare link targets for symlinks/hardlinks
    if type1 in ['symlink', 'hardlink'] and type2 in ['symlink', 'hardlink']:
        link1 = info1.get('linkname', '')
        link2 = info2.get('linkname', '')
        if link1 != link2:
            differences.append(f"Link target: {link1} vs {link2}")

    return differences


def should_exclude_path(path: str, exclude_patterns: List[str]) -> bool:
    """Check if a path should be excluded based on exclude patterns."""
    for pattern in exclude_patterns:
        if re.search(pattern, path):
            return True
    return False


def filter_json_by_patterns(json_data: Dict[str, Any], exclude_patterns: List[str]) -> Dict[str, Any]:
    """Filter JSON data by excluding paths that match the patterns."""
    if not exclude_patterns:
        return json_data

    filtered = {}
    excluded_count = 0

    for path, info in json_data.items():
        if not should_exclude_path(path, exclude_patterns):
            filtered[path] = info
        else:
            excluded_count += 1

    if excluded_count > 0:
        print(f"Excluded {excluded_count} files matching patterns", file=sys.stderr)

    return filtered


def compare_json_contents(json1: Dict[str, Any], json2: Dict[str, Any]) -> tuple:
    """Compare two JSON content dictionaries."""
    differences = []

    # Get all file paths
    paths1 = set(json1.keys())
    paths2 = set(json2.keys())

    # Files only in first JSON
    only_in_first = paths1 - paths2
    if only_in_first:
        differences.append(f"Files only in first: {sorted(only_in_first)}")

    # Files only in second JSON
    only_in_second = paths2 - paths1
    if only_in_second:
        differences.append(f"Files only in second: {sorted(only_in_second)}")

    # Compare common files
    common_paths = paths1 & paths2
    file_differences = {}

    for path in sorted(common_paths):
        file_diffs = compare_file_info(path, json1[path], json2[path])
        if file_diffs:
            file_differences[path] = file_diffs

    if file_differences:
        differences.append("File differences:")
        for path, diffs in file_differences.items():
            differences.append(f"  {path}:")
            for diff in diffs:
                differences.append(f"    - {diff}")

    return len(differences) == 0, differences


def main():
    parser = argparse.ArgumentParser(
        description='Compare two JSON representations of tar contents')
    parser.add_argument('json1', help='First JSON file')
    parser.add_argument('json2', help='Second JSON file')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Show detailed comparison info')
    parser.add_argument('--json', action='store_true',
                       help='Output results as JSON')
    parser.add_argument('--exclude', '-e', action='append', default=[],
                        help='Regex pattern to exclude paths from comparison '
                             '(can be used multiple times)')

    args = parser.parse_args()

    # Check if files exist
    if not Path(args.json1).exists():
        print(f"Error: JSON file {args.json1} does not exist",
              file=sys.stderr)
        sys.exit(1)

    if not Path(args.json2).exists():
        print(f"Error: JSON file {args.json2} does not exist",
              file=sys.stderr)
        sys.exit(1)

    # Load JSON files
    if args.verbose:
        print(f"Loading {args.json1}")
    contents1 = load_json_file(args.json1)

    if args.verbose:
        print(f"Loading {args.json2}")
    contents2 = load_json_file(args.json2)

    if args.verbose:
        print(f"First JSON contains {len(contents1)} entries")
        print(f"Second JSON contains {len(contents2)} entries")

    # Apply exclude patterns
    if args.exclude:
        if args.verbose:
            print(f"Applying exclude patterns: {args.exclude}")
        contents1 = filter_json_by_patterns(contents1, args.exclude)
        contents2 = filter_json_by_patterns(contents2, args.exclude)

        if args.verbose:
            print(f"After filtering: {len(contents1)} and "
                  f"{len(contents2)} entries")

    # Compare contents
    matches, differences = compare_json_contents(contents1, contents2)

    # Output results
    if args.json:
        result = {
            'matches': matches,
            'differences': differences,
            'first_file_count': len(contents1),
            'second_file_count': len(contents2)
        }
        print(json.dumps(result, indent=2))
    else:
        if matches:
            print("Contents match!")
            sys.exit(0)
        else:
            print("Contents differ:")
            for diff in differences:
                print(f"{diff}")
            sys.exit(1)


if __name__ == '__main__':
    main()
